Build a full-stack healthcare supply chain website called "MedChain" using the following tech stack:

Frontend:
- React.js with Vite
- Tailwind CSS for styling
- Axios for API requests
- QR code scanner for drug verification using `zxing-js`

Backend:
- Node.js with Express.js
- MySQL database (use Sequelize ORM or raw queries)
- RESTful API endpoints
- Use CORS and dotenv
- Include JWT authentication for admin/pharmacy login

Key Features to Implement:

1. Drug Verification:
   - Each drug has a batch number, manufacturer, expiry date, and QR code.
   - When a QR is scanned or batch number is entered, validate it from the MySQL database.
   - Show whether the drug is authentic or counterfeit.

2. Emergency Stock Locator:
   - Users can search for essential drugs by name + city.
   - The system returns nearby pharmacies with real-time stock availability.
   - Pharmacy table should have fields: name, address, city, contact, lat/lng, inventory (linked to drugs table).

3. Admin Dashboard:
   - Admin can add/edit/delete drugs and pharmacies.
   - View recent verification activity and flagged counterfeit drugs.

4. Pharmacy Portal:
   - Login for pharmacy staff to update stock and manage inventory.
   - Real-time stock status and alerts for low/expired drugs.

5. Patient/Doctor Portal:
   - Search and verify drug batch numbers.
   - Locate emergency medicine in a selected city.

6. Optional Chatbot (Optional â€“ placeholder):
   - Include a section for future chatbot or assistant integration for drug queries.

Database Schema:
- `drugs`: id, name, batch_number, manufacturer, expiry_date, qr_code_url, is_counterfeit (boolean)
- `pharmacies`: id, name, city, address, contact, lat, lng
- `inventory`: id, pharmacy_id, drug_id, quantity, last_updated
- `users`: id, name, email, password (hashed), role (admin/pharmacy)
- `verifications`: id, drug_id, user_id, location, timestamp, result (genuine/counterfeit)

Other Requirements:
- Clean responsive UI for both web and mobile.
- Use MySQL as the primary database.
- Include a `.env` file for credentials.
- Deploy as a complete Replit project with frontend and backend connected.